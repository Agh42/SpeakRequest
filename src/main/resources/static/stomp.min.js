// Simple STOMP client implementation
window.Stomp = {
  over: function(socket) {
    return new StompClient(socket);
  }
};

function StompClient(socket) {
  this.socket = socket;
  this.connected = false;
  this.subscriptions = {};
  this.debug = null;
  this.subscriptionId = 0;
  
  this.connect = function(headers, connectCallback, errorCallback) {
    const self = this;
    
    this.socket.onopen = function() {
      // Send STOMP CONNECT frame
      self.socket.send("CONNECT\naccept-version:1.1,1.0\nheart-beat:10000,10000\n\n\0");
    };
    
    this.socket.onmessage = function(event) {
      const message = event.data;
      
      if (message.startsWith("CONNECTED")) {
        self.connected = true;
        if (connectCallback) connectCallback();
      } else if (message.startsWith("MESSAGE")) {
        // Parse STOMP MESSAGE frame
        const lines = message.split('\n');
        let destination = null;
        
        // Find destination header
        for (let line of lines) {
          if (line.startsWith('destination:')) {
            destination = line.substring(12);
            break;
          }
        }
        
        // Find message body (after empty line)
        const bodyStart = message.indexOf('\n\n') + 2;
        const bodyEnd = message.lastIndexOf('\0');
        const body = message.substring(bodyStart, bodyEnd);
        
        if (destination && self.subscriptions[destination]) {
          self.subscriptions[destination]({ body: body });
        }
      }
    };
    
    this.socket.onerror = function() {
      self.connected = false;
      if (errorCallback) errorCallback();
    };
    
    this.socket.onclose = function() {
      self.connected = false;
      if (errorCallback) errorCallback();
    };
  };
  
  this.subscribe = function(destination, callback) {
    this.subscriptions[destination] = callback;
    const subId = 'sub-' + (this.subscriptionId++);
    if (this.connected) {
      this.socket.send("SUBSCRIBE\nid:" + subId + "\ndestination:" + destination + "\n\n\0");
    }
    return { id: subId };
  };
  
  this.send = function(destination, headers, body) {
    if (this.connected) {
      this.socket.send("SEND\ndestination:" + destination + "\ncontent-type:application/json\n\n" + (body || '{}') + "\0");
    }
  };
}